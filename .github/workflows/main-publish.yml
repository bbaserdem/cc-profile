name: Main Branch - Build & Publish

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "frontend/**"
      - "hooks/**"
      - "package*.json"
      - "tsconfig.json"
      - "jest.config.js"
      - "eslint.config.js"
  workflow_dispatch: # Allow manual trigger

concurrency:
  group: main-deploy
  cancel-in-progress: false # Don't cancel in-progress deploys

jobs:
  validate:
    name: Validate & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for semantic versioning

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Cache TypeScript build
        uses: actions/cache@v3
        with:
          path: |
            dist
            tsconfig.tsbuildinfo
          key: ts-build-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('src/**/*.ts', 'tsconfig.json') }}
          restore-keys: |
            ts-build-${{ runner.os }}-${{ matrix.node-version }}-

      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: frontend-deps-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            frontend-deps-${{ runner.os }}-${{ matrix.node-version }}-

      - name: Cache frontend build
        uses: actions/cache@v3
        with:
          path: frontend/dist
          key: frontend-build-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('frontend/src/**/*', 'frontend/package*.json', 'frontend/tsconfig.json') }}
          restore-keys: |
            frontend-build-${{ runner.os }}-${{ matrix.node-version }}-

      - name: Install root dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Security audit
        run: |
          npm audit --audit-level high
          cd frontend && npm audit --audit-level high

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npx eslint src --max-warnings 0

      - name: Build
        run: npm run build

      - name: Test with coverage
        run: npm run test:ci

      - name: Verify build artifacts
        run: |
          test -f dist/cli.js || (echo "Missing dist/cli.js" && exit 1)
          test -f dist/index.js || (echo "Missing dist/index.js" && exit 1)
          test -f dist/interceptor-loader.mjs || (echo "Missing interceptor-loader.mjs" && exit 1)
          test -f dist/spawn-preload.cjs || (echo "Missing spawn-preload.cjs" && exit 1)
          test -d frontend/dist || (echo "Missing frontend/dist" && exit 1)
          echo "✅ All build artifacts present"

      - name: Test publish dry-run
        if: matrix.node-version == 20
        run: npm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload build artifacts
        if: matrix.node-version == 20
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            frontend/dist/
            package.json
            README.md
            LICENSE
          retention-days: 7

  publish:
    name: Publish to NPM
    needs: validate
    runs-on: ubuntu-latest
    if: success()
    environment: production # Require manual approval for production deploys
    permissions:
      contents: read
      id-token: write # Required for npm provenance

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Install dependencies (production only)
        run: |
          npm ci --prefer-offline --no-audit --omit=dev
          cd frontend && npm ci --prefer-offline --no-audit --omit=dev

      - name: Verify package contents
        run: |
          npm pack --dry-run
          echo "📦 Package contents verified"

      - name: Get package version
        id: get_version
        run: echo "version=$(node -p 'require("./package.json").version')" >> $GITHUB_OUTPUT

      - name: Check if version exists on NPM
        id: version_check
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if npm view cc-profile@$VERSION > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "🔍 Version $VERSION already exists on NPM"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version $VERSION is new, proceeding with publish"
          fi

      - name: Check if GitHub release exists
        id: release_check
        if: steps.version_check.outputs.exists == 'false'
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "🔍 Release $TAG already exists on GitHub"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Release $TAG is new, will create"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        if: steps.version_check.outputs.exists == 'false'
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.version_check.outputs.exists == 'false' && steps.release_check.outputs.exists == 'false'
        run: |
          gh release create "v${{ steps.get_version.outputs.version }}" \
            --title "Release v${{ steps.get_version.outputs.version }}" \
            --notes "## Changes
          - Automated release from main branch
          - See commit history for detailed changes

          ## Installation
          \`\`\`bash
          npm install -g cc-profile@${{ steps.get_version.outputs.version }}
          \`\`\`"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Already published
        if: steps.version_check.outputs.exists == 'true'
        run: |
          echo "✅ Version ${{ steps.get_version.outputs.version }} already published to NPM"
          echo "💡 To release a new version, bump the version in package.json"
